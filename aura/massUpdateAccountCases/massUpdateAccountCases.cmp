<!-- 
First things first:
The "body" of the component needs certain conditions so it can be used as an action, also needs to
have context of the page that will be executed, and in this case since we are modifying data
and we want to save the changes, we need an APEX class to help with the work.

For the component to know where is standing, needs what you can see as "force:hasRecordId" (in implements)
That condition (that is called interface) is used to save the actual record Id, so we can work on that record.

For the component to be used as a Quick Action, "force:lightningQuickActionWithoutHeader" is needed.

An Apex controller is needed if we are going to update data (using the database)

-->
<aura:component implements="force:lightningQuickActionWithoutHeader,force:hasRecordId"
                controller="CustomController">
    			<!-- In the future, Replace "CustomController" with an Apex class that you will use -->
    
    <!-- This attribute saves the actual record ID -->
    <aura:attribute name="recordId" type="String" />
    
    <!-- This is the way to execute a function from the controller as soon as the component is open 
		 Is recommended when the action only process data and there is no need for user interaction -->
    <aura:handler name="init" value="{!this}" action="{!c.doInit}" />
    <!-- 
       With the "c" in "{!c.nameOfTheFunction}" is how the component communicates with the 
       Javascript controller.
       "nameOfTheFunction" Will be replaced with the name of the function that will be executed in the
       Javascript controller.
	-->
    
    <!-- In this scenario, since is all server process, we don't need to set modal design or size, it will close as soon as
		 the component is executed. -->
	
</aura:component>